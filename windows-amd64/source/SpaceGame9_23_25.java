/* autogenerated by Processing revision 1307 on 2025-10-21 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SpaceGame9_23_25 extends PApplet {

// CJ Greer | 18 Sept 2025 | SpaceGame
Spaceship s1;
ArrayList<Powerup> powups = new ArrayList<Powerup>();
ArrayList<Rock> rocks = new ArrayList<Rock>();
ArrayList<Laser> lasers = new ArrayList<Laser>();
ArrayList<Star> stars = new ArrayList<Star>();
Timer rockTimer, puTimer, levelTimer, starTimer;
PImage startscreen, gameover;
int score, rocksPassed, level, rtime;
boolean play;

public void setup() {
  /* size commented out by preprocessor */;
  rtime = 2000;
  background(22);
  s1 = new Spaceship();
  levelTimer = new Timer(30000);
  starTimer = new Timer(30);
  levelTimer.start();
  puTimer = new Timer(8000);
  puTimer.start();
  rockTimer = new Timer(rtime);
  rockTimer.start();
  score = 0;
  rocksPassed = 0;
  play = false;
  startscreen = loadImage("starscreen1.png");
  gameover = loadImage("gameover.png");
  level = 1;
}

public void draw() {
  if (!play) {
    startScreen();
  } else {
    background(22);
    // Check Levels
    if (level == 1) {
      // Decrease rockTimer ??
    }
    if (starTimer.isFinished()) {
      stars.add(new Star());
      starTimer.start();
    }
    // Distributes a powerup on a timer
    if (puTimer.isFinished()) {
      powups.add(new Powerup());
      puTimer.start();
    }
  for (int i = 0; i < stars.size(); i++) {
      Star str = stars.get(i);
      str.move();
      str.display();
       if (str.reachedBottom()) {
        stars.remove(str);
        i--;
      }
  }
    // Display and moves all powerups
    for (int i = 0; i < powups.size(); i++) {
      Powerup pu = powups.get(i);
      pu.move();
      pu.display();

      if (pu.intersect(s1)) {
        // Remove Powerup
        powups.remove(pu);
        // Based on type, benefit player
        if (pu.type == 'H') {
          s1.health+=25;
          // Turret Increase
        } else if (pu.type == 'T') {
          s1.turretCount+=1;
          if (s1.turretCount>5) {
            s1.turretCount = 5;
          }
          // Ammo increase
        } else if (pu.type == 'A') {
          s1.laserCount+=25;
        }
      }

      if (pu.reachedBottom()) {
        powups.remove(pu);
        i--;
      }
      println(powups.size());
    }

    // Distributes a rock on a timer
    if (rockTimer.isFinished()) {
      rocks.add(new Rock());
      rockTimer.start();
    }

    // Display and moves all rocks
    for (int i = 0; i < rocks.size(); i++) {
      Rock rock = rocks.get(i);
      rock.move();
      rock.display();

      if (s1.intersect(rock)) {
        rocks.remove(rock);
        score-=rock.w;
        s1.health-=rock.w;
      }

      if (rock.reachedBottom()) {
        rocks.remove(rock);
        rocksPassed += 1;
        i--;
      }
      println(rocks.size());
    }

    // Display and move lasers
    for (int i = 0; i < lasers.size(); i++) {
      Laser laser = lasers.get(i);
      for (int j = 0; j<rocks.size(); j++) {
        Rock r = rocks.get(j);
        if (laser.intersect(r)) {

          //2. eradicate laser
          lasers.remove(laser);
          // 3. rocks should have health based on size
          r.w -= 5;
          // 4. laser does less hp if rock is bigger
          if (r.w<5) {
            rocks.remove(r);
          }
          score+=r.w;
          // 5. laser will do less damage if spammed
          // 6. tapeworm takes over!!!!!!
          // 7. points go towards spaceship DEPENDING on size of rock destroyed w/ laser
        }
      }
      laser.display();
      laser.move();
    }

    s1.display();
    s1.move(mouseX, mouseY);
    infoPanel();


    // Level advance
    if (level<level+1) {
      if (rocksPassed>10*level) {
        level+=1;
        rtime-=10*level;
      }
    }

    // Game over criteria
    if (s1.health<1) {
      gameOver();
    }
  }
}

public void mousePressed() {
  // laser.play();
  if (s1.turretCount == 1) {
    lasers.add(new Laser(s1.x, s1.y));
  } else if (s1.turretCount == 2) {
    lasers.add(new Laser(s1.x-15, s1.y));
    lasers.add(new Laser(s1.x+15, s1.y));
  } else if (s1.turretCount == 3) {
    lasers.add(new Laser(s1.x, s1.y+15));
    lasers.add(new Laser(s1.x-15, s1.y));
    lasers.add(new Laser(s1.x+15, s1.y));
  } else if (s1.turretCount == 4) {
    lasers.add(new Laser(s1.x-15, s1.y));
    lasers.add(new Laser(s1.x+15, s1.y));
    lasers.add(new Laser(s1.x, s1.y+15));
    lasers.add(new Laser(s1.x, s1.y-15));
  } else {
    lasers.add(new Laser(s1.x, s1.y-15));
    lasers.add(new Laser(s1.x-15, s1.y));
    lasers.add(new Laser(s1.x+15, s1.y));
    lasers.add(new Laser(s1.x+15, s1.y-30));
    lasers.add(new Laser(s1.x-15, s1.y-30));
  }
}

public void infoPanel() {
  rectMode(CENTER);
  fill(127, 127);
  rect(width/2, 475, width, 50);
  fill(220);
  textSize(25);
  text("Score: " + score, 70, 475);
  text("Health: " + s1.health, 200, 475);
  text("Passed Rocks: " + rocksPassed, 200, 40);
  text("Turrets: " + s1.turretCount, width-170, 475);
  fill(255);
  text("Level: " + level, width-100, 40);
}

public void startScreen() {
  imageMode(CENTER);
  image(startscreen,height/2,width/2);
  //background(0);
  fill(255);
  if (mousePressed) {
    play = true;
  }
}

public void gameOver() {
  imageMode(CENTER);
  image(gameover,height/2,width/2);
  noLoop();
}
class Laser {
  // Member Variables
  int x, y, w, h;
  //PImage ship;

  // Constructor
  Laser(int x, int y) {
    this.x = x;
    this.y = y;
    w = 15;
    h = 30;
  }

  // Member Methods
  public void display() {
    //image(ship,x,y);
    stroke(222);
    strokeWeight(3);
    rectMode(CENTER);
    rect(x, y, 2, 10);
  }

  public void move() {
    y = y-10;
  }

  public void fire() {
  }

  public boolean reachedTop() {
    if (y<-10) {
      return true;
    } else {
      return false;
    }
  }
  public boolean intersect(Rock r) {
    float d = dist(x, y, r.x, r.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class Powerup {
  // Member Variables
  int x, y, w, speed;
  char type;
  int c1;
  //PImage r1;

  // Constructor
  Powerup() {
    x = PApplet.parseInt(random(width));
    y = -100;
    w = 25;
    speed = 1;
    if (random(10)>7) {
      //r1 = loadImage("rock03.png");
      type = 'H';
      c1 = color(20, 255, 22);
    } else if (random(10)>5) {
      type = 'T';
      c1 = color(234, 33, 22);
      //r1 = loadImage("rock02.png");
    } else {
      //r1 = loadImage("rock01.png");
      type = 'A';
      c1 = color(20, 22, 222);
    }
  }

  // Member Methods
  public void display() {
    fill (c1);
    rect(x,y,w,w);
    fill(255);
    textSize(12);
    textAlign(CENTER);
    text(type,x,y);
    //imageMode(CENTER);
    //if (w<1) {
    //  w=10;
    //}
    //r1.resize(w, w);
    //image(r1, x, y);
  }

  public void move() {
    y = y + speed;
  }

  public boolean reachedBottom() {
    if (y>height+w) {
      return true;
    } else {
      return false;
    }
  }
  public boolean intersect(Spaceship s) {
    float d = dist(x, y, s.x, s.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class Rock {
  // Member Variables
  int x, y, w, speed;
  PImage r1;
  
  // Constructor
  Rock() {
    x = PApplet.parseInt(random(width));
    y = -100;
    w = PApplet.parseInt(random(10,100));
    speed = 100/w;
    if(random(10)>7) {
      r1 = loadImage("rock01.png");
    } else if(random(10)>5) {
      r1 = loadImage("rock01.png");
    } else {
      r1 = loadImage("rock01.png");
    }
  }
  
  // Member Methods
  public void display() {
    imageMode(CENTER);
    if (w<1){
    w=10;
    }
    r1.resize(w,w);
    image(r1,x,y);
  }
  
  public void move() {
    y = y + speed;
  }
  
  public boolean reachedBottom() {
    if(y>height+w) {
      return true;
    }else {
      return false;
    }
  }
  
  
}
class Spaceship {
  // Member Variables
  int x, y, w, health, turretCount, laserCount;
  PImage ship;

  // Constructor
  Spaceship() {
    x = width/2;
    y = height/2;
    w = 100;
    health = 100;
    turretCount = 1;
    laserCount = 100;
    ship = loadImage("spaceship.png");
  }

  // Member Methods
  public void display() {
    imageMode(CENTER);
    image(ship, x, y);
  }
  public void move(int x, int y) {
    this.x = x;
    this.y = y;
  }

  public void fire() {
  }
   public boolean intersect(Rock r) {
    float d = dist(x, y, r.x, r.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class Star {
  int x, y, w, speed;

  Star() {
    x = PApplet.parseInt(random(width));
    y = -10;
    w = PApplet.parseInt (random(1, 4));
    speed = PApplet.parseInt(random(15, 25));
  }

  public void display() {
    fill(random(255));
    ellipse(x, y, w, w);
  }


  public void move() {
    y += speed;
  }

  public boolean reachedBottom() {
    if (y<height+10) {
      return true;
    } else {
      return false;
    }
  }
}
// Daniel Shiffman
// Example 10-5: Object-oriented timer

class Timer {

  int savedTime; // When Timer started
  int totalTime; // How long Timer should last

  Timer(int tempTotalTime) {
    totalTime = tempTotalTime;
  }

  // Starting the timer
  public void start() {
    // When the timer starts it stores the current time in milliseconds.
    savedTime = millis();
  }

  // The function isFinished() returns true if 5,000 ms have passed. 
  // The work of the timer is farmed out to this method.
  public boolean isFinished() { 
    // Check how much time has passed
    int passedTime = millis()- savedTime;
    if (passedTime > totalTime) {
      return true;
    } else {
      return false;
    }
  }
}


  public void settings() { size(500, 500); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SpaceGame9_23_25" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
